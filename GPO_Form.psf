$global:counter = 0
$global:gpoCount = ((get-gpo -all -Domain $domainName).DisplayName).Count
$progressbar1.Maximum = $gpoCount
$progressbar1.Minimum = 0
$progressbar1.Step = 1
#Variable that tells the loop to exit
$script:buttonCancelLoop = $false

$formWSUGroupPolicyReport_Load={
	#TODO: Initialize Form Controls here
	
}

function Update-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.
	
	.PARAMETER ComboBox
		The ComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ComboBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
		
	.PARAMETER ValueMember
		Indicates the property to use for the value of the control.
	
	.PARAMETER Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red" -Append
		Update-ComboBox $combobox1 "White" -Append
		Update-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ComboBox]
		$ComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[Parameter(Mandatory = $false)]
		[string]$ValueMember,
		[switch]
		$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	$ComboBox.DisplayMember = $DisplayMember
	$ComboBox.ValueMember = $ValueMember
}
#endregion

$combobox1_SelectedIndexChanged={
	#TODO: Place custom script here
}

# update function to add new items to the dropdown list
Update-ComboBox $combobox1 "GPO - All Display Name", "GPO - Creation Time", "GPO - Id", "GPO - Modification Time", "GPO Status - User Settings Disabled",
				"GPO Status - Computer Settings Disabled", "GPO Status - All Settings Enabled", "GPO Status - All Settings Disabled", "GPO - Computer Enabled", "GPO - User Enabled", "GPO - Computer Settings",
				"GPO - User Settings", "GPO - Links To"

$runReport_Click = {
	#TODO: Place custom script here
	$domainName = $env:USERDNSDOMAIN # gets the domain name
	if ($combobox1.SelectedItem.ToString() -eq "GPO - All Display Name") # displays all exisiting gpo display name 
	{
		$statusstrip1.Show()
		$toolstripstatuslabel1.Text = 'processing...'
		(get-gpo -all -Domain $domainName) | Sort-Object -Property @{ Expression = { $_.DisplayName }; Descending = $false } | Select-Object -Property @{
			label = "Display Name"; Expression = { $_.DisplayName }
		} | Out-GridView -Title "Display name of the Group Policy object (GPO)"
		$statusstrip1.Hide()
	}
	elseif ($combobox1.SelectedItem.ToString() -eq "GPO - Creation Time") # displays the gpo name, creation time - sorts list by latest creation date/time
	{
		$statusstrip1.Show()
		$toolstripstatuslabel1.Text = 'processing...'
		(get-gpo -all -Domain $domainName) | Sort-Object -Property @{ Expression = { $_.CreationTime }; Descending = $true } | Select-Object -Property @{
			label = "Display Name"; Expression = { $_.DisplayName }
		}, @{
			label = "Creation Time"; Expression = { $_.CreationTime }
		} | Out-GridView -Title "Time at which the Group Policy object (GPO) was created"
		$statusstrip1.Hide()
	}
	elseif ($combobox1.SelectedItem.ToString() -eq "GPO - Id") # displays the gpo name,guid - alphabetically with respect to display name
	{
		$statusstrip1.Show()
		$toolstripstatuslabel1.Text = 'processing...'
		(get-gpo -all -Domain $domainName) | Sort-Object -Property @{ Expression = { $_.DisplayName }; Descending = $false } | Select-Object -Property @{
			label = "Display Name"; Expression = { $_.DisplayName }
		}, @{ label = "Id"; Expression = { $_.Id } } | Out-GridView -Title "ID of the Group Policy object (GPO)"
		$statusstrip1.Hide()
	}
	elseif ($combobox1.SelectedItem.ToString() -eq "GPO - Modification Time") # displays the gpo name, modification time - sorts list by latest modified date/time
	{
		$statusstrip1.Show()
		$toolstripstatuslabel1.Text = 'processing...'
		(get-gpo -all -Domain $domainName) | Sort-Object -Property @{ Expression = { $_.ModificationTime }; Descending = $true } | Select-Object -Property @{
			label = "Display Name"; Expression = { $_.DisplayName }
		}, @{
			label = "Modification Time"; Expression = { $_.ModificationTime }
		} | Out-GridView -Title "ID of the Group Policy object (GPO)"
		$statusstrip1.Hide()
		
	}
	elseif ($combobox1.SelectedItem.ToString() -eq "GPO Status - User Settings Disabled") # displays all the user settings disabled gpo name 
	{
		$statusstrip1.Show()
		$toolstripstatuslabel1.Text = 'processing...'
		(get-gpo -all -domain $domainName) | Sort-Object -Property @{ Expression = { $_.DisplayName }; Descending = $false } | Where-object { $_.GpoStatus -Match "UserSettingsDisabled" } |
		select displayName, gpostatus | Out-GridView -Title "UserSettingsDisabled - GPO Name"
		$statusstrip1.Hide()
	}
	elseif ($combobox1.SelectedItem.ToString() -eq "GPO Status - Computer Settings Disabled") # displays all the computer settings disabled gpo name 
	{
		$statusstrip1.Show()
		$toolstripstatuslabel1.Text = 'processing...'
		(get-gpo -all -domain $domainName) | Sort-Object -Property @{ Expression = { $_.DisplayName }; Descending = $false } | Where-object { $_.GpoStatus -Match "ComputerSettingsDisabled" } |
		select displayName, gpostatus | Out-GridView -Title "Computer Settings Disabled - GPO Name"
		$statusstrip1.Hide()
	}
	elseif ($combobox1.SelectedItem.ToString() -eq "GPO Status - All Settings Enabled") # displays all setting enabled gpo name 
	{
		$statusstrip1.Show()
		$toolstripstatuslabel1.Text = 'processing...'
		(get-gpo -all -domain $domainName) | Sort-Object -Property @{ Expression = { $_.DisplayName }; Descending = $false } | Where-object { $_.GpoStatus -Match "AllSettingsEnabled" } |
		select displayName, gpostatus |
		Out-GridView -Title "All Settings Enabled - GPO Name"
		$statusstrip1.Hide()
	}
	elseif ($combobox1.SelectedItem.ToString() -eq "GPO Status - All Settings Disabled") # displays all the computer settings disabled gpo name 
	{
		$statusstrip1.Show()
		$toolstripstatuslabel1.Text = 'processing...'
		(get-gpo -all -domain $domainName) | Sort-Object -Property @{ Expression = { $_.DisplayName }; Descending = $false } | Where-object { $_.GpoStatus -Match "AllSettingsDisabled" } |
		select displayName, gpostatus | Out-GridView -Title "All Settings Disabled - GPO Name"
		$statusstrip1.Hide()
	}
	elseif ($combobox1.SelectedItem.ToString() -eq "GPO - Computer Enabled") # displays all gpo name side by its computer enabled value(true or false)
	{
		$statusstrip1.Show()
		$toolstripstatuslabel1.Text = 'processing...'
		(get-gpo -all -Domain $domainName) | Sort-Object -Property @{ Expression = { $_.DisplayName }; Descending = $false } | Select-Object -Property @{
			label = "Display Name"; Expression = { $_.DisplayName }
		}, @{ label = "Enabled"; Expression = { ($_.Computer).Enabled } } | Out-GridView -Title "Computer Enabled - GPO Name"
		$statusstrip1.Hide()
	}
	elseif ($combobox1.SelectedItem.ToString() -eq "GPO - User Enabled") # displays all gpo name side by its user enabled value(true or false)
	{
		$statusstrip1.Show()
		$toolstripstatuslabel1.Text = 'processing...'
		(get-gpo -all -Domain $domainName) | Sort-Object -Property @{ Expression = { $_.DisplayName }; Descending = $false } | Select-Object -Property @{
			label = "Display Name"; Expression = { $_.DisplayName }
		}, @{ label = "Enabled"; Expression = { ($_.User).Enabled } } | Out-GridView -Title "User Enabled - GPO Name"
		$statusstrip1.Hide()
	}
	elseif ($combobox1.SelectedItem.ToString() -eq "GPO - Computer Settings") # displays all gpo name side by its computer settings status as Modified or NeverModified
	{
		function Get-ComputerSettings
		{
			$statusstrip1.Show()
			$toolstripstatuslabel1.Text = 'processing...'
			ForEach ($GPO in (Get-GPO -All -Domain $DomainName)) {
				if ($GPO.Computer.DSVersion -eq 0 -and $GPO.Computer.SysvolVersion -eq 0) # gpo.computer DSVersion/SysvolVersion properties
				{
					$computerSettings = "Never Modified"
				}
				else
				{
					$computerSettings = "Modified"
				}
				# output
				New-Object -TypeName PSObject -Property @{
					'Display Name' = $GPO.DisplayName
					'Computer Settings' = $ComputerSettings
				}
			}
		}
		$computerSettingsRes = Get-ComputerSettings
		$computerSettingsRes | Out-Gridview -Title "Computer Settings - GPO"
		$statusstrip1.Hide()
	}
	elseif ($combobox1.SelectedItem.ToString() -eq "GPO - User Settings") # displays all gpo name side by its user settings status as Modified or NeverModified
	{
		function Get-UserSettings
		{
			$statusstrip1.Show()
			
			ForEach ($GPO in (Get-GPO -All -Domain $DomainName)) {
				if ($GPO.User.DSVersion -eq 0 -and $GPO.User.SysvolVersion -eq 0) # gpo.user DSVersion/SysvolVersion properties
				{
					$UserSettings = "Never Modified"
				}
				else
				{
					$UserSettings = "Modified"
				}
				# output
				New-Object -TypeName PSObject -Property @{
					'Display Name' = $GPO.DisplayName
					'User Settings' = $UserSettings
				}
			}
		}
		$toolstripstatuslabel1.Text = 'processing...'
		$userSettingsRes = Get-UserSettings
		$userSettingsRes | Out-Gridview -Title "User Settings - GPO"
		$statusstrip1.Hide()
	}
	
	elseif ($combobox1.SelectedItem.ToString() -eq "GPO - Links To") # displays all gpo name side by its OrgUnit 
	{
		#Init CancelLoop
		$script:buttonCancelLoop = $false
		$buttonCancelLoop.Enabled = $true
		#Disable the run report button so we don't trigger it again
		$runReport.Enabled = $false
		$buttonCancelLoop.Show()
		$buttonCancelLoop.Enabled = $true
		function Get-LinksTo
		{
			$statusstrip1.Show()
			$progressbar1.Show()
			ForEach ($GPO in (Get-GPO -All -Domain $DomainName))
			{
				#process the pending message
				[System.Windows.Forms.Application]::DoEvents()
				
				if ($script:buttonCancelLoop -eq $true)
				{
					#Clear the progress bar
					$progressbar1.Value = 0
					#Exit the loop
					break;
				}
				$counter = $counter + 1
				if ($counter % 2 -eq 0) # changing the statusbar back and forth to notify the user
				{
					$toolstripstatuslabel1.Text = 'processing...( ' + $counter + ' of ' + $gpoCount + ' )'
					$progressbar1.PerformStep()
				}
				else
				{
					$toolstripstatuslabel1.Text = 'collecting paths. please wait...( ' + $counter + ' of ' + $gpoCount + ' )'
					$progressbar1.PerformStep()
				}
				
				[xml]$XmlGPReport = $GPO.generatereport('xml')
				New-Object -TypeName PSObject -Property @{
					'Display Name' = $GPO.DisplayName
					'Links To'	   = $XmlGPReport.GPO.LinksTo | Select-Object -ExpandProperty SOMPath
				}
			}
			$runReport.Enabled = $true
			$buttonCancelLoop.Enabled = $false
			$buttonCancelLoop.Hide()
		}
		$linksRes = Get-LinksTo
		$linksRes | Out-Gridview -Title "GPO - LinksTo"
		$statusstrip1.Hide()
		$progressbar1.Hide()
		$progressbar1.Value = 0 # reset the progress bar 
	}
}

$buttonExit_Click = {
	#The Exit Button has DialogResult = Cancel
	#So we don't have to call $form1.Close method
	#But the Closing event will not trigger until
	#the loop is finished processing
	#So we just tell the loop to stop
	$formWSUGroupPolicyReport.Close()
}

$buttonCancelLoop_Click = {
	$script:buttonCancelLoop = $true
}
	<#
	
	Additional Requirement:  
	[HasComputer Settings, HasUserSettings] T/F Value ??
	
	#>
